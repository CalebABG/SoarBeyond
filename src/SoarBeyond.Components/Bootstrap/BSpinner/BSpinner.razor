@namespace SoarBeyond.Components

@inherits SoarBeyondComponentBase

@using BlazorComponentUtilities

<span @attributes="@ComponentAttributes"
      class="@ComponentClasses"
      style="@ComponentStyles"
      role="status"
      aria-hidden="true">
</span>

@code {

    [Parameter]
    public BSpinnerType SpinnerType { get; set; } = BSpinnerType.Border;

    [Parameter]
    public bool Small { get; set; }

    [Parameter]
    public string Size { get; set; }

    protected override string ComponentClasses
        => SpinnerClassBuilder.Build();

    protected override string ComponentStyles
        => SpinnerStyleBuilder.Build();

    /* Todo: See if there's a way to simplify this */
    private CssBuilder SpinnerClassBuilder
        => new CssBuilder()
            .AddClass(SpinnerClass, when: SpinnerClassConditionSet)
            .AddClass(SmallSpinnerClass, when: SpinnerClassConditionSet && SmallSpinnerClassConditionSet)
            .AddClass(base.ComponentClasses);

    private StyleBuilder SpinnerStyleBuilder
        => new StyleBuilder()
            .AddStyle(SpinnerSizeStyle)
            .AddStyle(base.ComponentStyles);

    private string SpinnerClass
        => $"spinner-{SpinnerType.ToString().ToLower()}";

    private string SmallSpinnerClass
        => SpinnerClass + (Small ? "-sm" : string.Empty);

    private bool SpinnerClassConditionSet
        => string.IsNullOrWhiteSpace(Class);

    private bool SmallSpinnerClassConditionSet
        => Small && string.IsNullOrWhiteSpace(Style);

    private string SpinnerSizeStyle
        => Small ? string.Empty : $"width: {Size}; height: {Size}";

}