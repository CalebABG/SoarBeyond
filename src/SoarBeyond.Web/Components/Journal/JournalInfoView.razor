@namespace SoarBeyond.Web.Components

@inherits InfoViewBase<SoarBeyond.Domain.Dto.Journal>

@using Humanizer
@using MediatR
@using SoarBeyond.Domain.Dto
@using SoarBeyond.Domain.Providers.Interfaces
@using SoarBeyond.Domain.Requests.Categories
@using static SoarBeyond.Shared.Extensions.CommonExtensions

<div class="card shadow mb-2">
    <div class="card-header container-fluid">
        <h5 class="m-0">@InfoTitle</h5>
    </div>

    <div class="card-body py-3">
        <div class="row mb-3">
            <div class="col-12">
                <label class="form-label" for="modelName">
                    @LabelFor(() => Model.Name)
                </label>

                <DebounceInput class="form-control" id="modelName"
                               @bind-Value="@Model.Name"
                               @bind-Value:event="oninput"
                               DebounceTime="@DebounceTime"
                               OnValueChanged="OnContentChanging"
                               ForceNotifyOnBlur="@false"
                               ForceNotifyByEnter="@false"/>
            </div>
        </div>

        <div class="row mb-3">
            <div class="col-12">
                <label class="form-label" for="modelDescription">
                    @LabelFor(() => Model.Description)
                </label>

                <DebounceTextArea class="form-control" id="modelDescription" rows="3"
                                  @bind-Value="@Model.Description"
                                  @bind-Value:event="oninput"
                                  DebounceTime="@DebounceTime"
                                  OnValueChanged="OnContentChanging"
                                  ForceNotifyOnBlur="@false"
                                  ForceNotifyByEnter="@false"/>
            </div>
        </div>

        <div class="row">
            <div class="col-12">
                <label class="form-label" for="modelSelect">
                    @LabelFor(() => Model.Category)
                </label>

                <select class="form-select" id="modelSelect" @onchange="HandleCategorySelected">
                    @if (_categories is not null)
                    {
                        <option value="-1">Uncategorized</option>
                        foreach (var item in _categories)
                        {
                            <option value="@item.Id" selected="@(Model.Category?.Id == item.Id)">@item.Name</option>
                        }
                    }
                </select>
            </div>
        </div>

        @ContentSavingTemplate
    </div>

    <div class="card-footer container-fluid">
        Created @Model.CreatedDate.LocalDateTime.Humanize()
    </div>
</div>

@code {

    [Inject]
    public IMediator Mediator { get; set; }

    private List<Category> _categories;

    protected override async Task OnInitializedAsync()
    {
        _categories = (await Mediator.Send(new GetAllCategoriesRequest(Model.UserId))).ToList();
    }

    private async Task HandleCategorySelected(ChangeEventArgs args)
    {
        int value = int.Parse(args.Value!.ToString()!);
        Model.Category = value < 1 ? null : _categories.Find(c => c.Id == value);
        await OnContentChanging(null);
    }
}